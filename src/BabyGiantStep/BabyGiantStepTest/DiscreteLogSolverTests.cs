using System;
using System.Numerics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using BabyGiantStep;

namespace BabyGiantStepTest
{
    [TestClass]
    public class DiscreteLogSolverTests
    {
        [TestMethod]
        public void TestFixedDiscreteLog()
        {
            BigInteger g = new BigInteger(2);
            BigInteger h = new BigInteger(22);
            BigInteger p = new BigInteger(29);
            BigInteger result = DiscreteLogSolver.FindDiscreteLog(g, h, p);
            Assert.AreEqual(new BigInteger(26), result);
        }

        [TestMethod]
        public void TestNoSolution()
        {
            // For p = 7, the subgroup generated by 2 is {1,2,4}; 3 does not belong.
            BigInteger g = new BigInteger(2);
            BigInteger h = new BigInteger(3);
            BigInteger p = new BigInteger(7);
            BigInteger result = DiscreteLogSolver.FindDiscreteLog(g, h, p);
            Assert.AreEqual(new BigInteger(-1), result);
        }

        [TestMethod]
        public void TestInverseMod()
        {
            // Testing inverse: 2 * 3 mod 5 = 6 mod 5 = 1.
            BigInteger a = new BigInteger(2);
            BigInteger mod = new BigInteger(5);
            BigInteger inv = DiscreteLogSolver.InverseMod(a, mod);
            Assert.AreEqual(new BigInteger(3), inv);
        }

        [TestMethod]
        public void TestSqrtAndCeilingSqrt()
        {
            // Sqrt(16) = 4, Sqrt(17) = 4, and CeilingSqrt(17) = 5.
            BigInteger n1 = new BigInteger(16);
            BigInteger n2 = new BigInteger(17);
            BigInteger sqrt1 = BigIntegerExtensions.Sqrt(n1);
            BigInteger sqrt2 = BigIntegerExtensions.Sqrt(n2);
            BigInteger ceilSqrt1 = BigIntegerExtensions.CeilingSqrt(n1);
            BigInteger ceilSqrt2 = BigIntegerExtensions.CeilingSqrt(n2);
            Assert.AreEqual(new BigInteger(4), sqrt1);
            Assert.AreEqual(new BigInteger(4), sqrt2);
            Assert.AreEqual(new BigInteger(4), ceilSqrt1);
            Assert.AreEqual(new BigInteger(5), ceilSqrt2);
        }

        [TestMethod]
        public void TestModPow()
        {
            // Test: 3^4 = 81, 81 mod 5 = 1.
            BigInteger baseValue = new BigInteger(3);
            BigInteger exponent = new BigInteger(4);
            BigInteger modulus = new BigInteger(5);
            BigInteger expected = new BigInteger(1);
            BigInteger result = DiscreteLogSolver.ModPow(baseValue, exponent, modulus);
            Assert.AreEqual(expected, result);
        }

        [TestMethod]
        public void TestSyntheticDiscreteLog()
        {
            // Synthetic tests: using a random exponent (0 to p-2) for prime p.
            BigInteger p = new BigInteger(97);
            BigInteger g = new BigInteger(5);
            Random random = new Random();
            for (int i = 0; i < 10; i++)
            {
                int exp = random.Next(0, 96); // exponent in [0, 95]
                BigInteger expected = new BigInteger(exp);
                BigInteger h = DiscreteLogSolver.ModPow(g, expected, p);
                BigInteger computed = DiscreteLogSolver.FindDiscreteLog(g, h, p);
                Assert.AreEqual(expected, computed);
            }
        }
    }
}